on:
  workflow_call:
    outputs:
      git-commit-short-sha:
        description: "The Git commit short SHA"
        value: ${{ jobs.test-and-build.outputs.git-commit-short-sha }}
      container-image-digest:
        description: "The Docker image digest which uniquely identifies the built image"
        value: ${{ jobs.test-and-build.outputs.container-image-digest }}

# On this project, I went with a single "Test & Build" job, since each job
# gets billed rounded to the next minute, and having multiple separated jobs
# is not worth it at the beginning of the project.

# Keep in mind that, if the test suite becomes too big, and test threading is
# required, or the workflow speed becomes critial, we might need to revert back
# to separated jobs.

jobs:
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest

    outputs:
      git-commit-short-sha: ${{ steps.variables.outputs.git-commit-short-sha }}
      container-image-digest: ${{ steps.build-and-push-release-image.outputs.digest }}

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3.1.0

      - # We'll generate a unique id that we'll use to identify the build run
        # on our systems
        name: Generate UUID for build
        id: uuidgen
        run: echo "uuid=$(uuidgen)" >> $GITHUB_OUTPUT

      - name: Set additional variables
        id: variables
        uses: icalia-actions/common-variables@v0.0.3

      - name: Set build timestamp
        id: set-build-timestamp
        run: echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.2.1

      - name: Build Test Image
        id: build-test-image
        uses: docker/build-push-action@v3.2.0
        with:
          load: true
          target: testing
          platforms: linux/amd64
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            DEVELOPER_UID=${{ steps.variables.outputs.runner-uid }}
            DEVELOPER_USERNAME=${{ steps.variables.outputs.runner-user }}
          tags: |
            icalialabs/rails-active-record-demo-2022:testing-${{ steps.variables.outputs.git-dasherized-branch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # - name: Prepare test coverage reporting on CodeClimate
      #   uses: icalia-actions/cc-test-reporter-base@v0.0.2
      #   env:
      #     CC_TEST_REPORTER_ID: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
      #   with:
      #       command: before-build
      #       version: "0.10.3"

      - name: Run tests
        env:
          UID: ${{ steps.variables.outputs.runner-uid }}
          USER: ${{ steps.variables.outputs.runner-user }}
          TESTING_IMAGE_TAG: ":testing-${{ steps.variables.outputs.git-dasherized-branch }}"
        run: docker compose run --rm tests

      # - name: Publish test coverage report to CodeClimate
      #   uses: icalia-actions/cc-test-reporter-base@v0.0.2
      #   env:
      #     CC_TEST_REPORTER_ID: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
      #   with:
      #       command: after-build --coverage-input-type simplecov --prefix /workspaces/rails-active-record-demo-2022
      #       version: "0.10.3"

      - name: Archive test logs and screenshots
        uses: actions/upload-artifact@v3.1.0
        if: always()
        with:
          name: system-spec-screenshots
          retention-days: 7
          path: |
            log/test.log
            tmp/capybara/screenshots

      # - name: Authenticate to Google Cloud
      #   uses: google-github-actions/auth@v1.0.0
      #   with:
      #     service_account: github-actions-runner@rails-active-record-demo-2022.iam.gserviceaccount.com
      #     workload_identity_provider: projects/000000000000/locations/global/workloadIdentityPools/devops/providers/github

      # - name: Set up Google Cloud SDK
      #   uses: google-github-actions/setup-gcloud@v1.0.0

      # - name: Authorize push to Google Cloud Artifact Registry
      #   run: gcloud auth configure-docker us-central1-docker.pkg.dev

      # - name: Build & Push Release Image
      #   id: build-and-push-release-image
      #   uses: docker/build-push-action@v3.2.0
      #   with:
      #     push: true
      #     target: release
      #     platforms: linux/amd64
      #     builder: ${{ steps.buildx.outputs.name }}
      #     build-args: |
      #       DEVELOPER_UID=${{ steps.variables.outputs.runner-uid }}
      #       DEVELOPER_USERNAME=${{ steps.variables.outputs.runner-user }}
      #     tags: |
      #       us-central1-docker.pkg.dev/rails-active-record-demo-2022/rails-active-record-demo-2022/rails-active-record-demo-2022-app:${{ steps.variables.outputs.git-commit-short-sha }}
      #       us-central1-docker.pkg.dev/rails-active-record-demo-2022/rails-active-record-demo-2022/rails-active-record-demo-2022-app:${{ steps.variables.outputs.git-dasherized-branch }}
      #       us-central1-docker.pkg.dev/rails-active-record-demo-2022/rails-active-record-demo-2022/rails-active-record-demo-2022-app:latest
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max
